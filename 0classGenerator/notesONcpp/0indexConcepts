
BASIC CONCEPTS
Class
A class is a blueprint for intanciating objects.
Mi definicion: el equivalente a un molde en el mundo de las ideas de platon.

Object = Instance. Are the concrete shape of a class.
At the end of the day, they are a data structure.
But they area more abstract data structure than a vector or a list.
They are broader, as a concept.

--------------------------------------------------------------

CLASS ARQUITECTURE
Constructor (Each class has an implict construtor if not specified)
Constructor overload - (takes parameters);
Destructor;
Constructor copy		  
Operator overload

Member functions.

Member attributes

2 concepts. Constructor overload (also called adhoc-Polymorphysm) and operator overload

Constructor copy and overload = share the same input. (Canonical const &src);
The class passed as a const reference.


/* To overload into std::ostream */
/* std::ostream & operator<<(std::ostream &stream, Canonical const &rhs) */


DEEP COPY
for assgin operator (used in copy construtor). if the class only has an attributes member lika a string, its enough to just copy it.
But if it has lets say, an inventory, or array of five materias that were allocated with new, we should not jus
copy the pointer. Its neccessary a deep copy that allocates on all of those new materias for the inventory.

--------------------------------------------------------------

VISIBILITY
private (classes) vs public (structs) vs protected (for inheretance)


--------------------------------------------------------------
HERITAGE
Base class vs derived/child class
Polymorphysm. Derived class can be treated as itself or base class.
Pure virtual functions void function() = 0;
Abstract classes. (Mix of pure virtual and normal member functions) AMateria
Interfaces. Classes with just abstract member functions; ICharacter

CONST reference
check all the notes in the exercies for constant reference.

New and delete
Deleting a null pointer has no effect. It's not good coding style necessarily because it's not needed, but it's not bad either.

If you are searching for good coding practices consider using smart pointers instead so then you don't need to delete at all.



FILES
#include <fstream>

std::ifstream inlet;
ifstream y ofstream para ficheros de input y output.
si vas a pasarlos como parametros de funcion, recuerda que tienen que ser por referencia o da error de compilacion.
Tambien recuerda que lanzan excepciones. pero para ello hay que activarlas con funciones.



TRY-CATCH    Y throw
Explicado en un main. Se puede lanzar lo que sea que sea. Un objeto, un int, lo que quieras. Y el catch lo recoje y ahi ya gestionas.
Es muy sencillo, aunque consume recursos, al menos mas que gestionar con booleanos.

catch (...) significa catch all. captura todo, pero puede ser dificil de depurar.

throw std::exception(); esta sintaxis es, throw por un lado (el progrmaa avandona la ejecuciÃ³n normal y empezara a buscar un bloque catch).
y por otro lado, ES LA CREACION DE UN OBJETO. de ahi los parenteis.
std::exception() es un constructor, como seria std::string("hola") o como seria Animal(); estas lanzando un objeto.
que se recoge en catch (std::exception &e) recoges el objeto lanzado por referencia y lo nombras como e (o el nombre de la variable que quieras).

prueba a lanzar un 2 y a recogerlo con catch(const int& e), funciona



/* --------------------------------- GET | SET --------------------------------- */
std::string const & Canonical::getName() const
{
	return (this->_name);
}

void Canonical::setName(std::string const &name)
{ 
	this->_name = name;
}

/* Getter can return a const ref, because in main function, the moment that is assigned,
 the value is what is copied, and NOT the pointer itself. 
 Also, if user would try to modify it, since its const, it will not compile. */

 /* Setter recieves a CONST ref as a parameter. That means that if u try something like:
 src[0] = 'd'; it will not compile. 
 When doing this->_name = name; , its just copying the value of name, and not the refernce.
 So no problem, the parameter and this->_name will still be two differente sections of memory,
 and therfore will have two different addresses.*/

STL <4 categories>

Algorithms
Containers
Iterators
Functors

About iterators:
iterators are a class (ver class __wrap_iter) that allows to traverse the elements of a container.
for a vector container, this seems easy and logical. for other containers like a binary tree, not so much.

los iterators pueden ser normales o const_iterators. Ojo la notacion.

la movida, es que los tratas como punteros, porque tienen sobrecargado el operador * y la aritmetica de punteros, con ++, el operador binario +, - etc...
y ya esta. no tiene mucho mas. con la clase y los metodos que tiene cargados, vector.begin(), end, std::distance(), recorres los containers. end of the story.